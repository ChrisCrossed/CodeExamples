// Enumerations for the Button State
enum Enum_MenuButton
{
    PlayGame,
    Credits,
    Quit,
    
    HowToPlay1,
    PlayStreak,
    Challenge,
    
    PlayStreak_Normal,
    PlayStreak_Hard,
    PlayStreak_Extreme,
    
    TimeTrial,
    Unlimited,
    
    Start_TimeTrial_5,
    Start_TimeTrial_10,
    Start_TimeTrial_20,
    
    Start_Normal_Unlimited,
    Start_Hard_Unlimited,
    Start_Extreme_Unlimited,
    
    Challenge_1,
    Challenge_2,
    Challenge_3,
    Challenge_4,
    
    MainMenu,
    None,
    Resume
}

/***************************************************************************************/
/*
	filename   	Z_MenuButtonLogic.z 
	author		Chris Christensen
	email   	c.christensen@digipen.edu
	date    	10/22/2014
	
	brief:
	This is the Menu Button Logic. It handles all button information and color information
	
	Copyright DigiPen Institute of Technology 2014
*/        	 
/***************************************************************************************/
class Z_MenuButtonLogic : ZilchComponent
{
    //
    var GameLevel:Level = null;
    var LevelSpace:Space = null;
    
    // Store the button type within the editor
    [Property]
    var MenuButton : Enum_MenuButton = Enum_MenuButton.PlayGame;
    
    [Property]
    var LayerNumber : Integer = 0;
    
    // Button color information
    var StartingColor:Real4 = Real4(0, 0, 0, 0);
    var ButtonStillColored:Boolean = false;
    var ButtonStillSelected:Boolean = false;
    
    var CanBePressed:Boolean = true;
    
    var ButtonSelected:Boolean = false;
    var R_Timer:Real = 0;
    
    var InitDetail_Width:Integer = 0;
    var InitDetail_Height:Integer = 0;
    var InitDetail_DropTimer:Real = 0;
    var InitDetail_NumBoosts:Integer = 0;
    var InitDetail_Camera:Real = 0;
    var InitDetail_TimeLengthMinutes:Integer = 0;
    
    var B_ButtonIsActive:Boolean = false;
    var B_ButtonSelected:Boolean = false;
    
    var Color_Red:Real4 = Real4(1,0,0,1);
    var Color_Faded:Real4 = Real4();
    var Button_White:Real4 = Real4(1,1,1,1);
    var Button_Faded:Real4 = Real4();
    var Color_Blue:Real4 = Real4(0,0,1,1);
    var Color_Blue_Faded:Real4 = Real4();
    
    sends ResetButtons : Event;
    sends MenuUp : Event;
    sends MenuDown : Event;
    sends LevelInformation : Event;
    
    /*******************************************************************************/
    /*
        Description:
            Runs code when this Button is initialized
        
        Parameters:
            - init : CogInitializer - Used by Zilch for pre-defined functions
            
        Return:
            - None
    */
    /*******************************************************************************/
    function Initialize(init : CogInitializer)
    {
        this.LevelSpace = this.GameSession.CreateNamedSpace("LevelSpace", Archetype.Find("Space"));

        this.GameLevel  = Level.Find("Game_Puzzle");
        this.LevelSpace = this.GameSession.FindSpaceByName("LevelSpace");
        
        this.Owner.Reactive.Active = false;
        
        this.Color_Faded = this.Color_Red;
        this.Color_Faded.W = 0.25;
        
        this.Button_Faded = this.Button_White;
        this.Button_Faded.W = 0.25;
        
        this.Color_Blue_Faded = this.Color_Blue;
        this.Color_Blue_Faded.W = 0.25;
        
        var initialPos = this.Owner.Transform.Translation;
        if(this.LevelSpace.CameraViewport != null)
        {
            initialPos = Real3((this.LevelSettings.CameraViewport.ViewPlaneSize(0).X / 2) - (this.Owner.Area.Size.X * 0.5) + (10 * this.LayerNumber), initialPos.Y, initialPos.Z);
        }
        
        this.Owner.Transform.Translation = initialPos;
        
        // Create an Action Sequence attach to this object
        var seq = Action.Sequence(this.Owner.Actions);
        var group = Actions.Group(seq);
        
        Action.Delay(seq, (-this.Owner.Transform.WorldTranslation.Y + 5) * 0.02);
        Action.Property(group, @this.Owner.Transform.Translation, Real3(10 * this.LayerNumber, this.Owner.Transform.Translation.Y, 0), 1.0, Ease.QuadOut);
        
        
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        
        if(this.LayerNumber >= 0)
        {
            this.Owner.Transform.Scale = Real3(0.75, 0.75, 1);
            
            // Set the button to appear faded out
            this.Owner.Sprite.Color = Real4(1,0,0,0.25);
            this.Owner.FindChildByName("Button_Background").Sprite.Color = this.Button_Faded;
            
            // Set this state as the button's starting position
            this.StartingColor = this.Owner.Sprite.Color;
        }
        
        //if(this.LayerNumber >= 1)
        //{
        //    Action.Property(group, @this.Owner.Transform.Scale, Real3(0.75, 0.75, 1), 0.25, Ease.Linear);
        //}
        
        
        // Run functions for each state of the mouse
        Zero.Connect(this.Owner, Events.MouseEnter, this.OnMouseEnter);
        Zero.Connect(this.Owner, Events.MouseExit, this.OnMouseExit);
        Zero.Connect(this.Owner, Events.MouseDown, this.OnMouseDown);
        Zero.Connect(this.Owner, Events.MouseUp, this.OnMouseUp);
    
        this.Owner.Reactive.Active = true;
    }
    
    function OnLogicUpdate(event : UpdateEvent)
    {
        var seq = Action.Sequence(this.Owner.Actions);
        var group = Actions.Group(seq);
        
        if(this.B_ButtonIsActive)
        {
            Action.Property(seq, @this.Owner.Transform.Scale, Real3(1, 1, 1), 0.25, Ease.Linear);
        }
        else
        {
            Action.Property(seq, @this.Owner.Transform.Scale, Real3(0.75, 0.75, 1), 0.25, Ease.Linear);
        }
        
        if(this.Owner.Transform.Translation.X == 0 && !this.B_ButtonIsActive)
        {
            this.Owner.Reactive.Active = true;
            this.B_ButtonIsActive = true;
            
            
            
            Actions.Property(group, @this.Owner.FindChildByName("Button_Background").Sprite.Color, this.Button_White, 0.2, Ease.QuadOut);
            Actions.Property(group, @this.Owner.Sprite.Color, this.Color_Red, 0.2, Ease.QuadOut);
        }
        if(this.Owner.Transform.Translation.X != 0)
        {
            this.Owner.Reactive.Active = false;
            this.B_ButtonIsActive = false;
            
            Actions.Property(group, @this.Owner.FindChildByName("Button_Background").Sprite.Color, this.Button_Faded, 0.2, Ease.QuadOut);
            Actions.Property(group, @this.Owner.Sprite.Color, this.Color_Faded, 0.2, Ease.QuadOut);
        }
    }
    
    /*******************************************************************************/
    /*
        Description:
            Runs code when the Mouse enters the button
        
        Parameters:
            - event : ViewportMouseEvent - Used by Zilch for pre-defined functions
            
        Return:
            - None
    */
    /*******************************************************************************/
    function OnMouseEnter(event : ViewportMouseEvent)
    {
        var buttonPressed = this.Space.Create(Archetype.Find("Sound_MenuButtonSelected"));
        buttonPressed.SoundEmitter.Play();
        
        var seq = Action.Sequence(this.Owner.Actions);
        var group = Actions.Group(seq);
        
        Actions.Property(group, @this.Owner.FindChildByName("Button_Background").Sprite.Color, this.Button_White, 0.2, Ease.QuadOut);
        // Actions.Property(group, @this.Owner.Sprite.Color, this.Color_Red, 0.2, Ease.QuadOut);
        Actions.Property(group, @this.Owner.Sprite.Color, this.Color_Blue, 0.2, Ease.QuadOut);
    }
    
    /*******************************************************************************/
    /*
        Description:
            Runs code when the Mouse exits the button
        
        Parameters:
            - event : ViewportMouseEvent - Used by Zilch for pre-defined functions
            
        Return:
            - None
    */
    /*******************************************************************************/
    function OnMouseExit(event : ViewportMouseEvent)
    {
        // Store the Sequence for quick access
        var seq = Action.Sequence(this.Owner.Actions);
        
        if(!this.ButtonStillSelected)
        {
            // State that the button is no longer selected
            this.ButtonStillColored = false;
        }
        // When the mouse leaves, fade the button back down
        Action.Property(seq, @this.Owner.Sprite.Color, this.Color_Red, 0.25, Ease.Linear);
    }
    
    /*******************************************************************************/
    /*
        Description:
            Runs code when the Mouse clicks the button
        
        Parameters:
            - event : ViewportMouseEvent - Used by Zilch for pre-defined functions
            
        Return:
            - None
    */
    /*******************************************************************************/
    function OnMouseDown (event : ViewportMouseEvent)
    {
        if(this.Owner.Reactive.Active )
        {
            // Set the 'Button Still Selected' state to true
            this.ButtonStillColored = true;
        }
    }
    
    /*******************************************************************************/
    /*
        Description:
            Runs code when the Mouse releases the button
        
        Parameters:
            - event : ViewportMouseEvent - Used by Zilch for pre-defined functions
            
        Return:
            - None
    */
    /*******************************************************************************/
    function OnMouseUp (event : ViewportMouseEvent)
    {
        this.InitDetail_Width = this.Space.LevelSettings.Z_MainMenuManager.InitDetail_Width;
        this.InitDetail_Height = this.Space.LevelSettings.Z_MainMenuManager.InitDetail_Height;
        this.InitDetail_TimeLengthMinutes = this.Space.LevelSettings.Z_MainMenuManager.InitDetail_TimeLengthMinutes;
        
        // We only want to run if the button was clicked upon, and then released
        if(this.ButtonStillColored && this.Owner.Reactive.Active)
        {
            this.ButtonStillSelected = true;
            
            var seq = Action.Sequence(this.Owner.Actions);
            
            var sendLevelInfo = new SendLevelInformation();
            
            // Determine what type of button we are, and go to that appropriate level
            if(this.MenuButton == Enum_MenuButton.PlayGame)
            {
                Console.WriteLine("Dispatched");
                this.Space.DispatchEvent(Events.MenuDown, new Event());
            }
            else if(this.MenuButton == Enum_MenuButton.Credits)
            {
                this.Space.LoadLevel(Level.Find("Menu_Credits"));
            }
            else if(this.MenuButton == Enum_MenuButton.Quit)
            {
                this.GameSession.Quit();
            }
            
            // Layer 1 Buttons
            else if(this.MenuButton == Enum_MenuButton.HowToPlay1)
            {
                this.Space.LoadLevel(Level.Find("Tutorial_1"));
            }
            else if(this.MenuButton == Enum_MenuButton.PlayStreak)
            {
                Console.WriteLine("Dispatched");
                this.Space.DispatchEvent(Events.MenuDown, new Event());
            }
            else if(this.MenuButton == Enum_MenuButton.Challenge)
            {
                this.Space.LoadLevel(Level.Find("Menu_Challenge"));
            }
            
            // Layer 2 Buttons
            else if(this.MenuButton == Enum_MenuButton.PlayStreak_Normal)
            {
                sendLevelInfo.InitDetail_Width = 10;
                sendLevelInfo.InitDetail_Height = 16;
                sendLevelInfo.InitDetail_DropTimer = 1.5;
                sendLevelInfo.InitDetail_NumBoosts = 2;
                sendLevelInfo.InitDetail_Camera = 0;
                sendLevelInfo.InitDetail_TimeLengthMinutes = this.Space.LevelSettings.Z_MainMenuManager.InitDetail_TimeLengthMinutes;
                this.Space.DispatchEvent(Events.LevelInformation, sendLevelInfo);
                Console.WriteLine("Dispatched");
                
                this.Space.DispatchEvent(Events.MenuDown, new Event());
            }
            else if(this.MenuButton == Enum_MenuButton.PlayStreak_Hard)
            {
                sendLevelInfo.InitDetail_Width = 13;
                sendLevelInfo.InitDetail_Height = 13;
                sendLevelInfo.InitDetail_DropTimer = 1.25;
                sendLevelInfo.InitDetail_NumBoosts = 1;
                sendLevelInfo.InitDetail_Camera = 1.5;
                sendLevelInfo.InitDetail_TimeLengthMinutes = this.Space.LevelSettings.Z_MainMenuManager.InitDetail_TimeLengthMinutes;
                this.Space.DispatchEvent(Events.LevelInformation, sendLevelInfo);
                Console.WriteLine("Dispatched");
                
                this.Space.DispatchEvent(Events.MenuDown, new Event());
            }
            else if(this.MenuButton == Enum_MenuButton.PlayStreak_Extreme)
            {
                sendLevelInfo.InitDetail_Width = 16;
                sendLevelInfo.InitDetail_Height = 10;
                sendLevelInfo.InitDetail_DropTimer = 1.0;
                sendLevelInfo.InitDetail_NumBoosts = 1;
                sendLevelInfo.InitDetail_Camera = 3;
                sendLevelInfo.InitDetail_TimeLengthMinutes = this.Space.LevelSettings.Z_MainMenuManager.InitDetail_TimeLengthMinutes;
                this.Space.DispatchEvent(Events.LevelInformation, sendLevelInfo);
                Console.WriteLine("Dispatched");
                
                this.Space.DispatchEvent(Events.MenuDown, new Event());
            }
            
            // Layer 3 (Time Trial & Unlimited)
            else if(this.MenuButton == Enum_MenuButton.TimeTrial)
            {
                Console.WriteLine("Dispatched");
                this.Space.DispatchEvent(Events.MenuDown, new Event());
            }
            else if(this.MenuButton == Enum_MenuButton.Unlimited)
            {
                sendLevelInfo.InitDetail_Width = this.Space.LevelSettings.Z_MainMenuManager.InitDetail_Width;
                sendLevelInfo.InitDetail_Height = this.Space.LevelSettings.Z_MainMenuManager.InitDetail_Height;
                sendLevelInfo.InitDetail_DropTimer = this.Space.LevelSettings.Z_MainMenuManager.InitDetail_DropTimer;
                sendLevelInfo.InitDetail_NumBoosts = this.Space.LevelSettings.Z_MainMenuManager.InitDetail_NumBoosts;
                sendLevelInfo.InitDetail_Camera = this.Space.LevelSettings.Z_MainMenuManager.InitDetail_Camera;
                sendLevelInfo.InitDetail_TimeLengthMinutes = 0;
                this.Space.DispatchEvent(Events.LevelInformation, sendLevelInfo);
                
                this.OnGameModeSelected();
            }
            
            // Layer 4
            else if(this.MenuButton == Enum_MenuButton.Start_TimeTrial_5)
            {
                sendLevelInfo.InitDetail_Width = this.Space.LevelSettings.Z_MainMenuManager.InitDetail_Width;
                sendLevelInfo.InitDetail_Height = this.Space.LevelSettings.Z_MainMenuManager.InitDetail_Height;
                sendLevelInfo.InitDetail_DropTimer = this.Space.LevelSettings.Z_MainMenuManager.InitDetail_DropTimer;
                sendLevelInfo.InitDetail_NumBoosts = this.Space.LevelSettings.Z_MainMenuManager.InitDetail_NumBoosts;
                sendLevelInfo.InitDetail_Camera = this.Space.LevelSettings.Z_MainMenuManager.InitDetail_Camera;
                sendLevelInfo.InitDetail_TimeLengthMinutes = 5;
                this.Space.DispatchEvent(Events.LevelInformation, sendLevelInfo);
                
                this.OnGameModeSelected();
            }
            else if(this.MenuButton == Enum_MenuButton.Start_TimeTrial_10)
            {
                sendLevelInfo.InitDetail_Width = this.Space.LevelSettings.Z_MainMenuManager.InitDetail_Width;
                sendLevelInfo.InitDetail_Height = this.Space.LevelSettings.Z_MainMenuManager.InitDetail_Height;
                sendLevelInfo.InitDetail_DropTimer = this.Space.LevelSettings.Z_MainMenuManager.InitDetail_DropTimer;
                sendLevelInfo.InitDetail_NumBoosts = this.Space.LevelSettings.Z_MainMenuManager.InitDetail_NumBoosts;
                sendLevelInfo.InitDetail_Camera = this.Space.LevelSettings.Z_MainMenuManager.InitDetail_Camera;
                sendLevelInfo.InitDetail_TimeLengthMinutes = 10;
                this.Space.DispatchEvent(Events.LevelInformation, sendLevelInfo);
                
                this.OnGameModeSelected();
            }
            else if(this.MenuButton == Enum_MenuButton.Start_TimeTrial_20)
            {
                sendLevelInfo.InitDetail_Width = this.Space.LevelSettings.Z_MainMenuManager.InitDetail_Width;
                sendLevelInfo.InitDetail_Height = this.Space.LevelSettings.Z_MainMenuManager.InitDetail_Height;
                sendLevelInfo.InitDetail_DropTimer = this.Space.LevelSettings.Z_MainMenuManager.InitDetail_DropTimer;
                sendLevelInfo.InitDetail_NumBoosts = this.Space.LevelSettings.Z_MainMenuManager.InitDetail_NumBoosts;
                sendLevelInfo.InitDetail_Camera = this.Space.LevelSettings.Z_MainMenuManager.InitDetail_Camera;
                sendLevelInfo.InitDetail_TimeLengthMinutes = 20;
                this.Space.DispatchEvent(Events.LevelInformation, sendLevelInfo);
                
                this.OnGameModeSelected();
            }
            
            else if(this.MenuButton == Enum_MenuButton.MainMenu)
            {
                this.Space.DispatchEvent(Events.LoadTheme_Menu, new Event());
                this.Space.LoadLevel(Level.Find("Menu_MainMenu"));
            }
        }
        
        // Turn off the button
        
    }

    function OnGameModeSelected()
    {
        // TO DO: Move details into MainMenuManager and call events, as each button has their own values and thus can't pass them to OnGameModeSelected.
        this.InitDetail_Width = this.Space.LevelSettings.Z_MainMenuManager.InitDetail_Width;
        this.InitDetail_Height = this.Space.LevelSettings.Z_MainMenuManager.InitDetail_Height;
        this.InitDetail_DropTimer = this.Space.LevelSettings.Z_MainMenuManager.InitDetail_DropTimer;
        this.InitDetail_NumBoosts = this.Space.LevelSettings.Z_MainMenuManager.InitDetail_NumBoosts;
        this.InitDetail_Camera = this.Space.LevelSettings.Z_MainMenuManager.InitDetail_Camera;
        this.InitDetail_TimeLengthMinutes = this.Space.LevelSettings.Z_MainMenuManager.InitDetail_TimeLengthMinutes;
        
        this.LevelSpace.LoadLevel(this.GameLevel);
        this.LevelSpace.LevelSettings.Z_LevelSettings.LoadInitialization(this.InitDetail_Width, this.InitDetail_Height, this.InitDetail_DropTimer, this.InitDetail_NumBoosts, this.InitDetail_Camera, this.InitDetail_TimeLengthMinutes);
        
        if(this.GameSession.FindSpaceByName("Main") != null)
        {
            this.GameSession.FindSpaceByName("Main").Destroy();
        }
    }
    
    
    function ButtonReset()
    {
        // Create an Action Sequence attach to this object
        var seq = Action.Sequence(this.Owner.Actions);
        var group = Action.Group(seq);
        
        Action.Property(group, @this.Owner.Sprite.Color, this.StartingColor, 0.25, Ease.Linear);
        Action.Property(group, @this.Owner.Transform.Scale, Real3(0.75, 0.75, 1), 0.25, Ease.Linear);
        
        this.ButtonStillColored = false;
        this.ButtonStillSelected = false;
    }
    
    function ButtonIsActive(event : Event)
    {
        this.CanBePressed = true;
    }
    
    function ButtonNotActive(event : Event)
    {
        this.CanBePressed = false;
    }
    
//
}

//Sending a custom script
// Define a custom script event
class SendLevelInformation : Event
{
    // Remember that member variable names MUST be capitalized in Zilch
    var InitDetail_Width:Integer = 0;
    var InitDetail_Height:Integer = 0;
    var InitDetail_DropTimer:Real = 0;
    var InitDetail_NumBoosts:Integer = 0;
    var InitDetail_Camera:Real = 0;
    var InitDetail_TimeLengthMinutes:Integer = 0;
    
    constructor() : base()
    {
        
    }
}

