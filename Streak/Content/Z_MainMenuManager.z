class Z_MainMenuManager : ZilchComponent
{
    // LevelSpace Information
    var GameLevel:Level = null;
    var LevelSpace:Space = null;
    
    var CurrentLayer:Integer = 0;
    var B_ButtonReady:Boolean = false;
    var R_Timer:Real = 0;
    
    var Button_Play:Cog = null;
    var Button_Credits:Cog = null;
    var Button_Quit:Cog = null;
    
    var Button_Tutorial:Cog = null;
    var Button_PlayStreak:Cog = null;
    var Button_Challenge:Cog = null;
    
    var Button_Normal:Cog = null;
    var Button_Hard:Cog = null;
    var Button_Extreme:Cog = null;
    
    var Button_TimeTrial:Cog = null;
    var Button_Unlimited:Cog = null;
    
    var Button_Min_5:Cog = null;
    var Button_Min_10:Cog = null;
    var Button_Min_20:Cog = null;
    
    // ----------- //
    
    var InitDetail_Width:Integer = 0;
    var InitDetail_Height:Integer = 0;
    var InitDetail_DropTimer:Real = 0;
    var InitDetail_NumBoosts:Integer = 0;
    var InitDetail_Camera:Real = 0;
    var InitDetail_TimeLengthMinutes:Integer = 0;
    
    
    sends ReceivesLevelInformation : Event;
    
    function Initialize(init : CogInitializer)
    {
        // Assign each button and their layer
        this.Button_Play = this.Space.FindObjectByName("Button_PlayGame");
        this.Button_Credits = this.Space.FindObjectByName("Button_Credits");
        this.Button_Quit = this.Space.FindObjectByName("Button_Quit");
        
        this.Button_Tutorial = this.Space.FindObjectByName("Button_Tutorial");
        this.Button_PlayStreak = this.Space.FindObjectByName("Button_PlayStreak");
        this.Button_Challenge = this.Space.FindObjectByName("Button_Challenge");
        
        this.Button_Normal = this.Space.FindObjectByName("Button_Normal");
        this.Button_Hard = this.Space.FindObjectByName("Button_Hard");
        this.Button_Extreme = this.Space.FindObjectByName("Button_Extreme");
        
        this.Button_TimeTrial = this.Space.FindObjectByName("Button_TimeTrial");
        this.Button_Unlimited = this.Space.FindObjectByName("Button_Unlimited");
        
        this.Button_Min_5 = this.Space.FindObjectByName("Button_Min_5");
        this.Button_Min_10 = this.Space.FindObjectByName("Button_Min_10");
        this.Button_Min_20 = this.Space.FindObjectByName("Button_Min_20");
        
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        
        // When a button returns 'clicked', then move to a new layer, hiding others
        Zero.Connect(this.Space, Events.MenuDown, this.GoDownALayer);
        // When a button returns 'back', we move up a layer and move buttons appropriately
        Zero.Connect(this.Space, Events.MenuUp, this.ComeUpALayer);
        
        Zero.Connect(this.Space, Events.LevelInformation, this.ReceiveLevelInformation);
        Zero.Connect(this.GameSession, Events.GameRequestQuit, this.OnGameRequestQuit);
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        // This timer is based around when the player is allowed to make an action, whether that is go up or down a layer.
        this.R_Timer += event.Dt;
        
        // This code is left here since the MenuButtonLogic script exists on all buttons.
        // We don't want this code running more than once!
        if(Zero.Keyboard.KeyIsPressed(Keys.Back) || Zero.Keyboard.KeyIsPressed(Keys.Left))
        {
            if(this.CurrentLayer > 0 && this.R_Timer >= 0.4)
            {
                this.Space.DispatchEvent(Events.MenuUp, new Event());
                
                // This timer is based around when the player is allowed to make an action, whether that is go up or down a layer.
                this.R_Timer = 0;
            }
        }
        
        if(Zero.Keyboard.KeyIsPressed(Keys.Escape))
        {
            
        }
        
        Console.WriteLine(this.R_Timer);
        if(this.R_Timer >= 30) // After 30 seconds, kick into the Scoreboard
        {
            while(this.GameSession.FindSpaceByName("LevelSpace") != null)
            {
                this.GameSession.FindSpaceByName("LevelSpace").Destroy();
            }
            
            while(this.GameSession.FindSpaceByName("ThemeSpace") != null)
            {
                this.GameSession.FindSpaceByName("ThemeSpace").Destroy();
            }
            
            while(this.GameSession.FindSpaceByName("HudSpace") != null)
            {
                this.GameSession.FindSpaceByName("HudSpace").Destroy();
            }
            
            
            // Recreating details since they were destroyed above
            this.LevelSpace = this.GameSession.CreateNamedSpace("LevelSpace", Archetype.Find("Space"));
            this.GameLevel = Level.Find("Game_Scoreboard");
            this.LevelSpace = this.GameSession.FindSpaceByName("LevelSpace");
            
            this.LevelSpace.LoadLevel(this.GameLevel);
            this.LevelSpace.LevelSettings.Z_ScoreboardLogic.InitializeScoreboard(Enum_ScoreboardType.Normal_5, 0);
            
            while(this.GameSession.FindSpaceByName("Main") != null)
            {
                this.GameSession.FindSpaceByName("Main").Destroy();
            }
        }
        
        Console.WriteLine(this.CurrentLayer);
    }
    
    function OnGameRequestQuit(gameEvent : GameEvent)
    {
        Console.WriteLine("ESC Pressed");
        
        if(this.CurrentLayer == 0)
        {
            this.GameSession.Quit();
        }
        else
        {
            this.Space.DispatchEvent(Events.MenuUp, new Event());
            this.R_Timer = 0;
        }
        // this.GameSession.FindSpaceByName("Main").LoadLevel(Level.Find("Menu_MainMenu"));
        // this.GameSession.FindSpaceByName("HudSpace").Destroy();
        // this.Space.Destroy();
        gameEvent.Handled = true;
    }
    
    // Moves down one layer to the right
    function GoDownALayer(event : Event)
    {
        // This timer is based around when the player is allowed to make an action, whether that is go up or down a layer.
        this.R_Timer = 0;
        
        if(this.CurrentLayer < 4)
        {
            // Increment Layer
            ++this.CurrentLayer;
            
            // Play the sound effect
            var buttonPressed = this.Space.Create(Archetype.Find("Sound_MenuButtonPressed"));
            buttonPressed.SoundEmitter.Play();
            
            var seq = Actions.Sequence(this.Owner.Actions);
            var group = Action.Group(seq);
            
            // Layer 0 buttons
            var buttonPos = this.Button_Play.Transform.Translation;
            Action.Property(group, @this.Button_Play.Transform.Translation, Real3(buttonPos.X - 10, buttonPos.Y, buttonPos.Z), 0.35, Ease.QuadOut);
            
            buttonPos = this.Button_Credits.Transform.Translation;
            Action.Property(group, @this.Button_Credits.Transform.Translation, Real3(buttonPos.X - 10, buttonPos.Y, buttonPos.Z), 0.35, Ease.QuadOut);
            
            buttonPos = this.Button_Quit.Transform.Translation;
            Action.Property(group, @this.Button_Quit.Transform.Translation, Real3(buttonPos.X - 10, buttonPos.Y, buttonPos.Z), 0.35, Ease.QuadOut);
            
            // Layer 1 buttons
            buttonPos = this.Button_Tutorial.Transform.Translation;
            Action.Property(group, @this.Button_Tutorial.Transform.Translation, Real3(buttonPos.X - 10, buttonPos.Y, buttonPos.Z), 0.35, Ease.QuadOut);
            
            buttonPos = this.Button_PlayStreak.Transform.Translation;
            Action.Property(group, @this.Button_PlayStreak.Transform.Translation, Real3(buttonPos.X - 10, buttonPos.Y, buttonPos.Z), 0.35, Ease.QuadOut);
            
            buttonPos = this.Button_Challenge.Transform.Translation;
            Action.Property(group, @this.Button_Challenge.Transform.Translation, Real3(buttonPos.X - 10, buttonPos.Y, buttonPos.Z), 0.35, Ease.QuadOut);
            
            // Layer 2 buttons
            buttonPos = this.Button_Normal.Transform.Translation;
            Action.Property(group, @this.Button_Normal.Transform.Translation, Real3(buttonPos.X - 10, buttonPos.Y, buttonPos.Z), 0.35, Ease.QuadOut);
            
            buttonPos = this.Button_Hard.Transform.Translation;
            Action.Property(group, @this.Button_Hard.Transform.Translation, Real3(buttonPos.X - 10, buttonPos.Y, buttonPos.Z), 0.35, Ease.QuadOut);
            
            buttonPos = this.Button_Extreme.Transform.Translation;
            Action.Property(group, @this.Button_Extreme.Transform.Translation, Real3(buttonPos.X - 10, buttonPos.Y, buttonPos.Z), 0.35, Ease.QuadOut);
            
            // Layer 3 buttons
            buttonPos = this.Button_TimeTrial.Transform.Translation;
            Action.Property(group, @this.Button_TimeTrial.Transform.Translation, Real3(buttonPos.X - 10, buttonPos.Y, buttonPos.Z), 0.35, Ease.QuadOut);
            
            buttonPos = this.Button_Unlimited.Transform.Translation;
            Action.Property(group, @this.Button_Unlimited.Transform.Translation, Real3(buttonPos.X - 10, buttonPos.Y, buttonPos.Z), 0.35, Ease.QuadOut);
            
            // Layer 4 buttons
            buttonPos = this.Button_Min_5.Transform.Translation;
            Action.Property(group, @this.Button_Min_5.Transform.Translation, Real3(buttonPos.X - 10, buttonPos.Y, buttonPos.Z), 0.35, Ease.QuadOut);
            
            buttonPos = this.Button_Min_10.Transform.Translation;
            Action.Property(group, @this.Button_Min_10.Transform.Translation, Real3(buttonPos.X - 10, buttonPos.Y, buttonPos.Z), 0.35, Ease.QuadOut);
            
            buttonPos = this.Button_Min_20.Transform.Translation;
            Action.Property(group, @this.Button_Min_20.Transform.Translation, Real3(buttonPos.X - 10, buttonPos.Y, buttonPos.Z), 0.35, Ease.QuadOut);
        }
        
        for(var i = 0; i < 5; ++i)
        {
            this.EnableCorrectButtons(this.CurrentLayer - 1, i);
            Console.WriteLine("Checking `i`: `this.CurrentLayer - 1`");
        }
    }
    
    // Reverts up one layer to the left
    function ComeUpALayer(event : Event)
    {
        if(this.CurrentLayer > 0)
        {
            --this.CurrentLayer;
            
            // Play the sound effect
            var buttonPressed = this.Space.Create(Archetype.Find("Sound_MenuButtonSelected"));
            buttonPressed.SoundEmitter.Play();
            
            var seq = Actions.Sequence(this.Owner.Actions);
            var group = Action.Group(seq);
            
            // Layer 0 buttons
            var buttonPos = this.Button_Play.Transform.Translation;
            Action.Property(group, @this.Button_Play.Transform.Translation, Real3(buttonPos.X + 10, buttonPos.Y, buttonPos.Z), 0.35, Ease.QuadOut);
            
            buttonPos = this.Button_Credits.Transform.Translation;
            Action.Property(group, @this.Button_Credits.Transform.Translation, Real3(buttonPos.X + 10, buttonPos.Y, buttonPos.Z), 0.35, Ease.QuadOut);
            
            buttonPos = this.Button_Quit.Transform.Translation;
            Action.Property(group, @this.Button_Quit.Transform.Translation, Real3(buttonPos.X + 10, buttonPos.Y, buttonPos.Z), 0.35, Ease.QuadOut);
            
            // Layer 1 buttons
            buttonPos = this.Button_Tutorial.Transform.Translation;
            Action.Property(group, @this.Button_Tutorial.Transform.Translation, Real3(buttonPos.X + 10, buttonPos.Y, buttonPos.Z), 0.35, Ease.QuadOut);
            
            buttonPos = this.Button_PlayStreak.Transform.Translation;
            Action.Property(group, @this.Button_PlayStreak.Transform.Translation, Real3(buttonPos.X + 10, buttonPos.Y, buttonPos.Z), 0.35, Ease.QuadOut);
            
            buttonPos = this.Button_Challenge.Transform.Translation;
            Action.Property(group, @this.Button_Challenge.Transform.Translation, Real3(buttonPos.X + 10, buttonPos.Y, buttonPos.Z), 0.35, Ease.QuadOut);
            
            // Layer 2 buttons
            buttonPos = this.Button_Normal.Transform.Translation;
            Action.Property(group, @this.Button_Normal.Transform.Translation, Real3(buttonPos.X + 10, buttonPos.Y, buttonPos.Z), 0.35, Ease.QuadOut);
            
            buttonPos = this.Button_Hard.Transform.Translation;
            Action.Property(group, @this.Button_Hard.Transform.Translation, Real3(buttonPos.X + 10, buttonPos.Y, buttonPos.Z), 0.35, Ease.QuadOut);
            
            buttonPos = this.Button_Extreme.Transform.Translation;
            Action.Property(group, @this.Button_Extreme.Transform.Translation, Real3(buttonPos.X + 10, buttonPos.Y, buttonPos.Z), 0.35, Ease.QuadOut);
            
            // Layer 3 buttons
            buttonPos = this.Button_TimeTrial.Transform.Translation;
            Action.Property(group, @this.Button_TimeTrial.Transform.Translation, Real3(buttonPos.X + 10, buttonPos.Y, buttonPos.Z), 0.35, Ease.QuadOut);
            
            buttonPos = this.Button_Unlimited.Transform.Translation;
            Action.Property(group, @this.Button_Unlimited.Transform.Translation, Real3(buttonPos.X + 10, buttonPos.Y, buttonPos.Z), 0.35, Ease.QuadOut);
            
            // Layer 4 buttons
            buttonPos = this.Button_Min_5.Transform.Translation;
            Action.Property(group, @this.Button_Min_5.Transform.Translation, Real3(buttonPos.X + 10, buttonPos.Y, buttonPos.Z), 0.35, Ease.QuadOut);
            
            buttonPos = this.Button_Min_10.Transform.Translation;
            Action.Property(group, @this.Button_Min_10.Transform.Translation, Real3(buttonPos.X + 10, buttonPos.Y, buttonPos.Z), 0.35, Ease.QuadOut);
            
            buttonPos = this.Button_Min_20.Transform.Translation;
            Action.Property(group, @this.Button_Min_20.Transform.Translation, Real3(buttonPos.X + 10, buttonPos.Y, buttonPos.Z), 0.35, Ease.QuadOut);
        }
        
        // this.EnableCorrectButtons(this.CurrentLayer);
        for(var i = 0; i < 5; ++i)
        {
            this.EnableCorrectButtons(this.CurrentLayer - 1, i);
            Console.WriteLine("Checking `i`: `this.CurrentLayer - 1`");
        }
    }
    
    function EnableCorrectButtons(layerNumber : Integer, currentLayer : Integer)
    {
        // This code reverts buttons based on their layer
        //if(!(layerNumber > 0))
        //{
        //    // Only the Play button is reset (visually) since the others quit
        //    this.Button_Play.Z_MenuButtonLogic.ButtonReset();
        //}
        //if(!(layerNumber > 1))
        //{
        //    // Only the Play button is reset (visually) since the others quit
        //    this.Button_PlayStreak.Z_MenuButtonLogic.ButtonReset();
        //}
        //if(!(layerNumber > 2))
        //{
        //    // Only the Play button is reset (visually) since the others quit
        //    this.Button_Normal.Z_MenuButtonLogic.ButtonReset();
        //    this.Button_Hard.Z_MenuButtonLogic.ButtonReset();
        //    this.Button_Extreme.Z_MenuButtonLogic.ButtonReset();
        //}
        //if(!(layerNumber > 3))
        //{
        //    // Only the Play button is reset (visually) since the others quit
        //    this.Button_TimeTrial.Z_MenuButtonLogic.ButtonReset();
        //    this.Button_Unlimited.Z_MenuButtonLogic.ButtonReset();
        //}
        
        var seq:ActionSet = Actions.Sequence(this.Owner.Actions);
        var group = Action.Group(seq);
        
        var fullSize = Real3(1,1,1);
        var smallSize = Real3(0.75, 0.75, 1);
        
        if(layerNumber == 0 && layerNumber == currentLayer) // Main buttons. Play Game, Credits, Quit.
        {
            var buttonColor = this.Button_Play.Sprite.Color;
            buttonColor.W = 1;
            this.Button_Play.Reactive.Active = true;
            Action.Property(group, @this.Button_Play.Sprite.Color, buttonColor, 0.3, Ease.QuadOut);
            
            buttonColor = this.Button_Credits.Sprite.Color;
            buttonColor.W = 1;
            this.Button_Credits.Reactive.Active = true;
            Action.Property(group, @this.Button_Credits.Sprite.Color, buttonColor, 0.3, Ease.QuadOut);
            
            buttonColor = this.Button_Quit.Sprite.Color;
            buttonColor.W = 1;
            this.Button_Quit.Reactive.Active = true;
            Action.Property(group, @this.Button_Quit.Sprite.Color, buttonColor, 0.3, Ease.QuadOut);
        }
        else
        {
            var buttonColor = this.Button_Play.Sprite.Color;
            buttonColor.W = 0.25;
            this.Button_Play.Reactive.Active = false;
            Action.Property(group, @this.Button_Play.Sprite.Color, buttonColor, 0.3, Ease.QuadOut);
            
            buttonColor = this.Button_Credits.Sprite.Color;
            buttonColor.W = 0.25;
            this.Button_Credits.Reactive.Active = false;
            Action.Property(group, @this.Button_Credits.Sprite.Color, buttonColor, 0.3, Ease.QuadOut);
            
            buttonColor = this.Button_Quit.Sprite.Color;
            buttonColor.W = 0.25;
            this.Button_Quit.Reactive.Active = false;
            Action.Property(group, @this.Button_Quit.Sprite.Color, buttonColor, 0.3, Ease.QuadOut);
        }
        
        if(layerNumber == 1 && layerNumber == currentLayer) // Secondary buttons. Tutorial, Play Streak, Challenge
        {
            var buttonColor = this.Button_Tutorial.Sprite.Color;
            buttonColor.W = 1;
            this.Button_Tutorial.Reactive.Active = true;
            Action.Property(group, @this.Button_Tutorial.Sprite.Color, buttonColor, 0.3, Ease.QuadOut);
            
            buttonColor = this.Button_PlayStreak.Sprite.Color;
            buttonColor.W = 1;
            this.Button_PlayStreak.Reactive.Active = true;
            Action.Property(group, @this.Button_PlayStreak.Sprite.Color, buttonColor, 0.3, Ease.QuadOut);
            
            buttonColor = this.Button_Challenge.Sprite.Color;
            buttonColor.W = 1;
            this.Button_Challenge.Reactive.Active = true;
            Action.Property(group, @this.Button_Challenge.Sprite.Color, buttonColor, 0.3, Ease.QuadOut);
        }
        else
        {
            var buttonColor = this.Button_Tutorial.Sprite.Color;
            buttonColor.W = 0.25;
            this.Button_Tutorial.Reactive.Active = false;
            Action.Property(group, @this.Button_Tutorial.Sprite.Color, buttonColor, 0.3, Ease.QuadOut);
            
            buttonColor = this.Button_PlayStreak.Sprite.Color;
            buttonColor.W = 0.25;
            this.Button_PlayStreak.Reactive.Active = false;
            Action.Property(group, @this.Button_PlayStreak.Sprite.Color, buttonColor, 0.3, Ease.QuadOut);
            
            buttonColor = this.Button_Challenge.Sprite.Color;
            buttonColor.W = 0.25;
            this.Button_Challenge.Reactive.Active = false;
            Action.Property(group, @this.Button_Challenge.Sprite.Color, buttonColor, 0.3, Ease.QuadOut);
        }
        
        if(layerNumber == 2 && layerNumber == currentLayer)
        {
            this.Button_Normal.Reactive.Active = true;
            this.Button_Hard.Reactive.Active = true;
            this.Button_Extreme.Reactive.Active = true;
        }
        else
        {
            this.Button_Normal.Reactive.Active = false;
            this.Button_Hard.Reactive.Active = false;
            this.Button_Extreme.Reactive.Active = false;
        }
        
        if(layerNumber == 3 && layerNumber == currentLayer)
        {
            this.Button_TimeTrial.Reactive.Active = true;
            this.Button_Unlimited.Reactive.Active = true;
        }
        else
        {
            this.Button_TimeTrial.Reactive.Active = false;
            this.Button_Unlimited.Reactive.Active = false;
        }
        
        if(layerNumber == 4 && layerNumber == currentLayer)
        {
            this.Button_Min_5.Reactive.Active = true;
            this.Button_Min_10.Reactive.Active = true;
            this.Button_Min_20.Reactive.Active = true;
        }
        else
        {
            this.Button_Min_5.Reactive.Active = false;
            this.Button_Min_10.Reactive.Active = false;
            this.Button_Min_20.Reactive.Active = false;
        }
    }
    
    function ReceiveLevelInformation(event : SendLevelInformation)
    {
        this.GameLevel  = Level.Find("Game_Puzzle");
        this.LevelSpace = this.GameSession.FindSpaceByName("LevelSpace");
        
        this.InitDetail_Width = event.InitDetail_Width;
        this.InitDetail_Height = event.InitDetail_Height;
        this.InitDetail_NumBoosts = event.InitDetail_NumBoosts;
        this.InitDetail_DropTimer = event.InitDetail_DropTimer;
        this.InitDetail_Camera = event.InitDetail_Camera;
        this.InitDetail_TimeLengthMinutes = event.InitDetail_TimeLengthMinutes;
        
        Console.WriteLine("TimeLength: `this.InitDetail_TimeLengthMinutes`");
    }
}
















