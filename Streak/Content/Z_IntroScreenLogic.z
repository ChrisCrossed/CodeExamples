/***************************************************************************************/
/*
	filename   	Z_IntroScreenLogic.z 
	author		Chris Christensen
	email   	c.christensen@digipen.edu
	date    	10/26/2014
	
	brief:
	This is the Z_IntroScreenLogic class.
	
	Copyright DigiPen Institute of Technology 2014
*/        	 
/***************************************************************************************/
enum Enum_BackgroundState
{
    FadeIn,
    Hold,
    FadeOut,
    Switch
}

class Z_IntroScreenLogic : ZilchComponent
{
    // Begin by fading in
    var BackgroundState:Enum_BackgroundState = Enum_BackgroundState.FadeIn;
    
    // Set the timer to 0
    var ITimer : Real = 0;
    var R_Timer : Real = 0;
    
    // Set the time to fade in/out
    [Property]
    var FadeTime : Real = 1.0;
    
    // Set the level to go to
    [Property]
    var GoToLevel : Level = Level.Find("Menu_MainMenu");
    
    function Initialize(init : CogInitializer)
    {
        // Set the initial color
        this.Owner.Sprite.Color = Real4(1, 1, 1, 0);
        
        this.Space.DispatchEvent(Events.LoadTheme_Menu, new Event());
        
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        if(Zero.Keyboard.KeyIsPressed(Keys.Space))
        {
            this.Space.LoadLevel(this.GoToLevel);
        }
        
        // Run functions based on the current state of the logo
        if(this.BackgroundState == Enum_BackgroundState.FadeIn)
        {
            this.OnFadeIn();
        }
        else if(this.BackgroundState == Enum_BackgroundState.Hold)
        {
            this.R_Timer += event.Dt;
            
            if(this.R_Timer >= this.FadeTime)
            {
                this.OnHold();
            }
        }
        else if(this.BackgroundState == Enum_BackgroundState.FadeOut)
        {
            this.OnFadeOut();
        }
        else if(this.BackgroundState == Enum_BackgroundState.Switch)
        {
            this.OnSwitch(event.Dt);
        }
    }
    
    function OnFadeIn()
    {
        var seq = Action.Sequence(this.Owner.Actions);
        
        // Using this will allow all actions to occur at the same time (Fade, change colors & move at same time)
        var grp = Action.Group(seq);
        
        var sprite = this.Owner.Sprite;
        if(sprite.Color.W <= 0.9)
        {
            var endColor = sprite.Color;
            endColor.W = 1.0;
            
            // Create a property to animate the color from its current value to one with zero alpha
            Action.Property(seq, @sprite.Color, endColor, 1.0, Ease.Linear);
        }
        
        else
        {
            sprite.Color.W = 1;
            this.BackgroundState = Enum_BackgroundState.Hold;
        }
    }
    
    function OnHold()
    {
        this.BackgroundState = Enum_BackgroundState.FadeOut;
    }
    
    function OnFadeOut()
    {
        var seq = Action.Sequence(this.Owner.Actions);
        
        var sprite = this.Owner.Sprite;
        
        if(sprite.Color.W >= 0.2)
        {
            var endColor = sprite.Color;
            endColor.W = 0.0;
            
            // Create a property to animate the color from its current value to one with zero alpha
            Action.Property(seq, @sprite.Color, endColor, 1.0, Ease.Linear);
        }
        else
        {
            sprite.Color.W = 0;
            this.BackgroundState = Enum_BackgroundState.Switch;
        }
    }
    
    function OnSwitch(time : Real)
    {
        this.ITimer += time;
        
        if(this.ITimer > 1)
        {
            this.Space.LoadLevel(this.GoToLevel);
        }
        
        // Find the level told above and go to it
    }
}


